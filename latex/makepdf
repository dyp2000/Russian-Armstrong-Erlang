#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
require 'fileutils'
require 'erb'
require 'yaml'

include FileUtils

$here = File.expand_path(File.dirname(__FILE__))
$root = File.join($here, '..')

def figures(&block)
  begin
    Dir["#$root/figures/18333*.png"].each do |file|
      cp(file, file.sub(/18333fig0(\d)0?(\d+)\-tn/, '\1.\2'))
    end
    block.call
  ensure
    Dir["#$root/figures/18333*.png"].each do |file|
      rm(file.gsub(/18333fig0(\d)0?(\d+)\-tn/, '\1.\2'))
    end
  end
end

def usage
  puts <<USAGE
Usage:
  makepdf [OPTION...] LANGUAGE [LANGUAGE 2...]

Options:
  -d, --debug      prints TeX and other output
USAGE
  exit
end

def command_exists?(command)
  if File.executable?(command) then
    return command
  end
  ENV['PATH'].split(File::PATH_SEPARATOR).map do |path|
    cmd = "#{path}/#{command}"
    File.executable?(cmd) || File.executable?("#{cmd}.exe") || File.executable?("#{cmd}.cmd")
  end.inject { |a, b| a || b }
end

def replace(string, &block)
  string.instance_eval do
    alias :s :gsub!
    instance_eval(&block)
  end
  string
end

def verbatim_sanitize(string)
  string.gsub('\\', '{\textbackslash}').
      gsub('~', '{\textasciitilde}').
      gsub(/([\$\#\_\^\%])/, '\\\\' + '\1{}')
end

def pre_pandoc(string, config)
  replace(string) do
    # Pandoc discards #### subsubsections #### - this hack recovers them
    s /\#\#\#\# (.*?) \#\#\#\#/, 'SUBSUBSECTION: \1'

    # Turns URLs into clickable links
    s /\`(http:\/\/[A-Za-z0-9\/\%\&\=\-\_\\\.]+)\`/, '<\1>'
    s /(\n\n)\t(http:\/\/[A-Za-z0-9\/\%\&\=\-\_\\\.]+)\n([^\t]|\t\n)/, '\1<\2>\1'

    # Process figures
    s /Insert\s18333fig\d+\.png\s*\n.*?\d{1,2}-\d{1,2}\. (.*)/, 'FIG: \1'
  end
end

def post_pandoc(string, config)
  replace(string) do
    space = /\s/

    # Reformat for the book documentclass as opposed to article
    s '\section', '\chap'
    s '\sub', '\\'
    s /SUBSUBSECTION: (.*)/, '\subsubsection{\1}'

    # Enable proper cross-reference
    s /#{config['fig'].gsub(space, '\s')}\s*(\d+)\-\-(\d+)/, '\imgref{\1.\2}'
    s /#{config['tab'].gsub(space, '\s')}\s*(\d+)\-\-(\d+)/, '\tabref{\1.\2}'
    s /#{config['prechap'].gsub(space, '\s')}\s*(\d+)(\s*)#{config['postchap'].gsub(space, '\s')}/, '\chapref{\1}\2'

    # Miscellaneous fixes
    s /FIG: (.*)/, '\img{\1}'
    s '\begin{enumerate}[1.]', '\begin{enumerate}'
    s /(\w)--(\w)/, '\1-\2'
    s /``(.*?)''/, "#{config['dql']}\\1#{config['dqr']}"

    # Typeset the maths in the book with TeX
    s '\verb!p = (n(n-1)/2) * (1/2^160))!', '$p = \frac{n(n-1)}{2} \times \frac{1}{2^{160}}$)'
    s '2\^{}80', '$2^{80}$'
    s /\sx\s10\\\^\{\}(\d+)/, '\e{\1}'

    # Convert inline-verbatims into \texttt (which is able to wrap)
    s /\\verb(\W)(.*?)\1/ do
      "{\\texttt{#{verbatim_sanitize($2)}}}"
    end

    # Ensure monospaced stuff is in a smaller font
    #s /(\\verb(\W).*?\2)/, '{\footnotesize\1}'
    #s /(\\begin\{verbatim\}.*?\\end\{verbatim\})/m, '{\footnotesize\1}'

    # Shaded verbatim block
    s /(\\begin\{verbatim\})/m, '\begin{minted}[xleftmargin=25pt]{erlang}'
    s /(\\end\{verbatim\})/m, '\end{minted}'
    #s /(\\begin\{verbatim\}.*?\\end\{verbatim\})/m, '\begin{shaded}\1\end{shaded}'
  end
end

ARGV.delete_if { |arg| $DEBUG = true if arg == '-d' or arg == '--debug' }
languages = ARGV.select { |arg| File.directory?("#$root/#{arg}") }
usage if languages.empty?

$config = YAML.load_file("#$here/config.yml")
template = ERB.new(File.read("#$here/template.tex"))

missing = ['pandoc', 'xelatex'].reject { |command| command_exists?(command) }
unless missing.empty?
  puts "Missing dependencies: #{missing.join(', ')}."
  puts "Install these and try again."
  exit
end

figures do
  languages.each do |lang|
    config = $config['default'].merge($config[lang]) rescue $config['default']

    puts "#{lang}:"
    markdown = Dir["#$root/#{lang}/*/*.md"].sort.map do |file|
      File.read(file)
    end.join("\n\n")

    print "\tParsing markdown... "
    latex = IO.popen('pandoc -p --no-wrap -f markdown -t latex', 'w+') do |pipe|
      pipe.write(pre_pandoc(markdown, config))
      pipe.close_write
      post_pandoc(pipe.read, config)
    end
    puts "done"

    print "\tCreating main.tex for #{lang}... "
    dir = "#$here/#{lang}"
    rm_rf(dir)
    mkdir_p(dir)
    File.open("#{dir}/main.tex", 'w') do |file|
      file.write(template.result(binding))
    end
    puts "done"

    abort = false

    puts "\tRunning XeTeX:"
    cd($root)
    3.times do |i|
      print "\t\tPass #{i + 1}... "
      IO.popen("cd #{dir} && pdflatex -shell-escape \"#{dir}/main.tex\" 2>&1") do |pipe|
        unless $DEBUG
          if ~/^!\s/
            puts "failed with:\n\t\t\t#{$_.strip}"
            puts "\tConsider running this again with --debug."
            abort = true
          end while pipe.gets and not abort
        else
          STDERR.print while pipe.gets rescue abort = true
        end
      end
      break if abort
      puts "done"
    end

    unless abort
      print "\tMoving output to erlangbook.#{lang}.pdf... "
      mkdir_p("#$root/book")
      mv("#{dir}/main.pdf", "#$root/book/erlangbook.#{lang}.pdf")
      puts "done"
    end
  end
end
